package io;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class TryNotepad extends JFrame implements ActionListener{
	private JTextArea ta;
	private MenuPane menu;
	private JMenu[] jMenu;
	private File file;
	
	public TryNotepad() {
		setBounds(600, 200, 700, 500);
		setTitle("메모장");
		
		Container c = getContentPane();
		ta = new JTextArea();
		JScrollPane scroll = new JScrollPane(ta);
		c.add("Center", scroll);
		
		menu = new MenuPane();
		jMenu = menu.getMenu();
		setJMenuBar(menu);
		
		setVisible(true);
		event();
	}
	
	public void event() {
		
		addWindowListener(new WindowAdapter() {

			@Override
			public void windowClosing(WindowEvent e) {
				if(ta.getText().length()!=0) {
					int result = JOptionPane.showConfirmDialog(TryNotepad.this, "저장하시겠습니까?", "저장 확인", JOptionPane.YES_NO_CANCEL_OPTION);
					if (result == JOptionPane.CANCEL_OPTION) return;
					if (result == JOptionPane.YES_OPTION) {
						saveDialog();
						if (file==null) return; 
						fileWrite();
					}
					System.exit(0);
				}
			}
			
		});
		
		for(int i = 0; i < menu.getItems().size(); i++) {
			menu.getItems().get(i).addActionListener(this);
		}
//		for(JMenu each : jMenu) {
//			for(JMenuItem i : each.get) {
//			}
//		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		JMenuItem menu = (JMenuItem) e.getSource();
		
		if (menu.getText().equals("끝내기")) {
			int result = JOptionPane.showConfirmDialog(this, "저장하시겠습니까?", "메모장", JOptionPane.YES_NO_CANCEL_OPTION);
			if(result == JOptionPane.YES_OPTION) {
				System.out.println("파일 저장");
			}else if(result == JOptionPane.CANCEL_OPTION) return;
			System.exit(0);
			
		}else if(menu.getText().equals("새로만들기")) {
			ta.setText("");
			
		}else if(menu.getText().equals("저장")) {
			if(ta.getText().length()==0) return;
			saveDialog();
			if (file!=null) fileWrite();
			
		}else if(menu.getText().equals("열기")) {
			openDialog();
			if (file!=null) fileRead(file);
		}
	}

	private void fileWrite() {
		try {
			FileWriter fw = new FileWriter(file);
			BufferedWriter br = new BufferedWriter(fw);
			br.write(ta.getText());
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void saveDialog() {
		JFileChooser chooser = new JFileChooser();
		int result = chooser.showSaveDialog(this);
		if(result == JFileChooser.APPROVE_OPTION) file = chooser.getSelectedFile();
	}

	private void fileRead(File file)  {
		ta.setText("");
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			String s;
			while((s = br.readLine())!=null) {
				ta.append(s+"\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void openDialog() {
		JFileChooser chooser = new JFileChooser();
		int result = chooser.showOpenDialog(this);
		if(result == JFileChooser.APPROVE_OPTION) {
			file = chooser.getSelectedFile();
		}
	}

	public static void main(String[] args) {
		new TryNotepad();
	}
}
