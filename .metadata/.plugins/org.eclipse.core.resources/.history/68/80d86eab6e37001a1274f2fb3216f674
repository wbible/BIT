package sudoku;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class Sudoku extends JFrame implements MouseListener, ActionListener {
	private static final int FRAME_WIDTH = 800;
	private static final int FRAME_HEIGHT = 500;
	private static final int CELL_WIDTH = 100;
	private static final int CELL_HEIGHT = 100;
	
	private enum Level{EASY, MEDIUM, HARD}
	
	private NumLabel[][] p_ar;
	private ArrayList<NumLabel>[] list_v = new ArrayList[9];
	private ArrayList<NumLabel>[] list_h = new ArrayList[9];
	private ArrayList<NumLabel>[] list_s = new ArrayList[9];
	private ArrayList<String>[] answer_v = new ArrayList[9];
	private ArrayList<String>[] answer_h = new ArrayList[9];
	private ArrayList<String>[] answer_s = new ArrayList[9];

	private Color color_main = new Color(52, 72, 97);

	private NumLabel lb_active, lb_old;
	private ArrayList<NumLabel> list_sameGroup = new ArrayList<NumLabel>();
	
	public void setNumber(String num) {
		if(lb_active.isEditable()) lb_active.setText(num);
		else return;
		
		int count = 0;
		for(NumLabel lb : list_sameGroup) {
			if(lb.getText().equals(num) && num != "") {
				lb.setWrong(true);
				count++;
				lb.setForeground(Color.RED);
			}
//			}else lb.setForeground(Color.BLACK);
		}
		if(count == 3) lb_active.setForeground(Color.BLACK);
	}
	
	public void setColor(String num) {
		
	}
	
	public void setLb_active(NumLabel lb) {
		lb_active = lb;
		getList_sameGroup(lb);
	}
	
	public void getList_sameGroup(NumLabel lb) {
		list_sameGroup.clear();
		for(int i = 0; i < 9; i++) {
			list_sameGroup.add(list_v[lb.getGroup_v()-1].get(i));
			list_sameGroup.add(list_h[lb.getGroup_h()-1].get(i));
			list_sameGroup.add(list_s[lb.getGroup_s()-1].get(i));
		}
	}

	public NumLabel[][] getP_ar() {
		return p_ar;
	}

	public Sudoku() {
		// 프레임과 컨테이너 설정
		super("스도쿠 게임");
		Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
		setBounds((int) ((screen.getWidth() - FRAME_WIDTH) / 2), (int) ((screen.getHeight() - FRAME_HEIGHT) / 2),
				FRAME_WIDTH, FRAME_HEIGHT);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.setLayout(new BorderLayout(20, 0));

		// 폰트 설정
		Font font_numpad = new Font("맑은 고딕", Font.BOLD, 25);
		Font font_option = new Font("맑은 고딕", Font.BOLD, 15);

		// 패널 초기화
		JPanel p_main = new JPanel();
		p_main.setLayout(new GridLayout(3, 3, 0, 0));
		c.add("Center", p_main);
		JPanel p_east = new JPanel();
		p_east.setLayout(new BorderLayout(0, 20));
		c.add("East", p_east);

		// 메인 숫자 입력 패널
		JPanel[] p_con = new JPanel[9];
		for (int i = 0; i < 9; i++) {
			p_con[i] = new JPanel();
			p_con[i].setBorder(BorderFactory.createLineBorder(color_main, 2));
			p_con[i].setLayout(new GridLayout(3, 3, 0, 0));
			p_main.add(p_con[i]);

			list_v[i] = new ArrayList<NumLabel>();
			list_h[i] = new ArrayList<NumLabel>();
			list_s[i] = new ArrayList<NumLabel>();
		}

		p_ar = new NumLabel[9][9];
		int group_s, group_h, group_v;
		for (int i = 0; i < 9; i++) {
			group_s = i + 1;
			for (int j = 0; j < 9; j++) {
				group_h = j / 3 + (i / 3) * 3 + 1;
				group_v = (j) % 3 + (i % 3) * 3 + 1;
				p_ar[i][j] = new NumLabel(this, group_s, group_h, group_v);
				p_ar[i][j].setHorizontalAlignment(JLabel.CENTER);
				p_ar[i][j].setForeground(Color.BLACK);
				p_con[i].add(p_ar[i][j]);
				
				list_s[i].add(p_ar[i][j]);
				list_v[group_v-1].add(p_ar[i][j]);
				list_h[group_h-1].add(p_ar[i][j]);
			}
		}

		restart();
		setLevel(Level.HARD);

		// 오른쪽 패널
		JPanel p_num = new JPanel();
		p_num.setLayout(new GridLayout(3, 3, 0, 0));

		JButton btn_new = new JButton("새로운 게임");
		btn_new.addActionListener(this);
		btn_new.setPreferredSize(new Dimension(300, 70));
		btn_new.setFocusable(false);

		OptionLabel[] num = new OptionLabel[9];
		for (int i = 0; i < 9; i++) {
			num[i] = new OptionLabel(this, i+1 + "", JLabel.CENTER);
			num[i].setBorder(BorderFactory.createLineBorder(color_main, 1));
			num[i].setFont(font_numpad);
			num[i].setForeground(color_main);
			p_num.add(num[i]);
		}

		JPanel p_option = new JPanel();
		p_option.setLayout(new GridLayout(2, 2, 0, 0));
		OptionLabel[] option = new OptionLabel[4];
		String[] option_name = { "노트", "힌트", "실행취소", "지우기" };
		for (int i = 0; i < 4; i++) {
			option[i] = new OptionLabel(this, option_name[i], JLabel.CENTER);
			option[i].setBorder(BorderFactory.createLineBorder(color_main, 1));
			option[i].setFont(font_option);
			option[i].setForeground(color_main);
			p_option.add(option[i]);
		}

		p_east.add("North", btn_new);
		p_east.add("Center", p_num);
		p_east.add("South", p_option);

		setVisible(true);
	}

	private void setLevel(Level level) {
		int blank=0, cell=0;
		if(level == Level.EASY) {
			blank = 4;
		}else if(level == Level.MEDIUM) {
			blank = 5;
		}else if(level == Level.HARD) {
			blank = 6;
		}
		for(int i = 0; i < 9; i++) {
			for(int j = 0; j < blank; j++) {
				cell = (int) (Math.random()*9);
				if(list_v[i].get(cell).getText().length()==0) {
					j--;
				}else {					
					list_v[i].get(cell).setText("");
					list_v[i].get(cell).setEditable(true);
				}
			}
		}
	}

	public void restart() {
		String num;
		int group_h, group_s;
		int count = 0;
		resetAnswer();
		RESTART: for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				num = answer_v[i].get((int) (Math.random() * answer_v[i].size()));
				group_h = list_v[i].get(j).getGroup_h() - 1;
				group_s = list_v[i].get(j).getGroup_s() - 1;
				
				list_v[i].get(j).setForeground(Color.BLACK);
				list_v[i].get(j).setBackground(Color.WHITE);
				list_v[i].get(j).setWrong(false);

				if (answer_h[group_h].contains(num) && answer_s[group_s].contains(num)) {
					list_v[i].get(j).setText(num);
					list_v[i].get(j).setAnswer(Integer.parseInt(num));
					answer_v[i].remove(answer_v[i].indexOf(num));
					answer_h[group_h].remove(answer_h[group_h].indexOf(num));
					answer_s[group_s].remove(answer_s[group_s].indexOf(num));
				} else {
					j--;
					count++;
				}
				if (count > 300) {
					i = -1;
					resetAnswer();
					count = 0;
					continue RESTART;
				}
			}
		}
	}

	public void resetAnswer() {
		for(int i = 0; i < 9; i++) {
			answer_v[i] = new ArrayList<String>();
			answer_h[i] = new ArrayList<String>();
			answer_s[i] = new ArrayList<String>();
		}
		for(int i = 0; i < 9; i++) {
			for (int j = 1; j < 10; j++) {
				answer_v[i].add(j + "");
				answer_h[i].add(j + "");
				answer_s[i].add(j + "");
			}
		}
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {

	}

	@Override
	public void mouseExited(MouseEvent e) {

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	public static void main(String[] args) {
		new Sudoku();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getActionCommand().equals("새로운 게임")) {
			restart();
			setLevel(Level.EASY);
		}
	}
}
